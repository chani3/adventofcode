#!/usr/bin/ruby

data = DATA.readlines
#asteroid is visible if not a multiple of the co-ordinates of another asteroid?
#so like... from 0,0 then 1,1 blocks all n,n. no... 2,2 blocks 3,3 which isn't a multiple.
#more like... the angle is the same. the slope. x1-x2/(y1-y2). all asteroids with same slope (relatively) are on same path that only counts once

asteroids = []
data.each_with_index { |row, y|
    row.chars.each_with_index { |char, x|
        if char == '#'
            asteroids << [x, y]
        end
    }
}

p "#{asteroids.size} asteroids"

maxSeen = 0

asteroids.each { |station|
    #p "trying station at #{station}"
    slopes = asteroids.map { |asteroid|
        if asteroid != station
            dy = asteroid[1] - station[1]
            dx = asteroid[0] - station[0]
            if dy == 0
                dx > 0 ? "pos0" : "neg0"
            elsif dx == 0
                dy > 0 ? "posInf" : "negInf"
            else
                direction = dy > 0 ? 1 : -1
                [dx.to_f/dy, direction]
            end
        end
    }
    #p slopes
    #p "--------------"
    #p slopes.uniq
    seen = slopes.uniq.size - 1
    #p "#{seen} visible"
    if seen > maxSeen
        maxSeen = seen
    end
}
p maxSeen

__END__
....#.....#.#...##..........#.......#......
.....#...####..##...#......#.........#.....
.#.#...#..........#.....#.##.......#...#..#
.#..#...........#..#..#.#.......####.....#.
##..#.................#...#..........##.##.
#..##.#...#.....##.#..#...#..#..#....#....#
##...#.............#.#..........#...#.....#
#.#..##.#.#..#.#...#.....#.#.............#.
...#..##....#........#.....................
##....###..#.#.......#...#..........#..#..#
....#.#....##...###......#......#...#......
.........#.#.....#..#........#..#..##..#...
....##...#..##...#.....##.#..#....#........
............#....######......##......#...#.
#...........##...#.#......#....#....#......
......#.....#.#....#...##.###.....#...#.#..
..#.....##..........#..........#...........
..#.#..#......#......#.....#...##.......##.
.#..#....##......#.............#...........
..##.#.....#.........#....###.........#..#.
...#....#...#.#.......#...#.#.....#........
...####........#...#....#....#........##..#
.#...........#.................#...#...#..#
#................#......#..#...........#..#
..#.#.......#...........#.#......#.........
....#............#.............#.####.#.#..
.....##....#..#...........###........#...#.
.#.....#...#.#...#..#..........#..#.#......
.#.##...#........#..#...##...#...#...#.#.#.
#.......#...#...###..#....#..#...#.........
.....#...##...#.###.#...##..........##.###.
..#.....#.##..#.....#..#.....#....#....#..#
.....#.....#..............####.#.........#.
..#..#.#..#.....#..........#..#....#....#..
#.....#.#......##.....#...#...#.......#.#..
..##.##...........#..........#.............
...#..##....#...##..##......#........#....#
.....#..........##.#.##..#....##..#........
.#...#...#......#..#.##.....#...#.....##...
...##.#....#...........####.#....#.#....#..
...#....#.#..#.........#.......#..#...##...
...##..............#......#................
........................#....##..#........#
